
==================== FINAL INTERFACE ====================
2018-01-23 20:31:39.725057 UTC

interface main:QuickCheck 8022
  interface hash: db40807c6aec09d4eb9a483cd6f8ec5f
  ABI hash: 7f6a5e04596d0c7b34cf7d33a34f5be0
  export-list hash: 4ef1cca50cc1d7a8e87005271aba8958
  orphan hash: 06374b2c7d3aa29bb2981b91b9817d40
  flag hash: 1c6f65d52f53d3e6bedf9b8d55a3afa1
  sig of: Nothing
  used TH splices: False
  where
exports:
  QuickCheck.propCollision
  QuickCheck.propPlaceOfApple
  QuickCheck.withOutCollision
module dependencies: GameSettings GameState UpdateGame
package dependencies: GLURaw-2.0.0.3 GLUT-2.7.0.12
                      ObjectName-1.1.0.1 OpenGL-3.0.2.0 OpenGLRaw-3.2.7.0
                      QuickCheck-2.10.1 StateVar-1.1.0.4 array-0.5.2.0 base-4.10.1.0
                      binary-0.8.5.1 bmp-1.2.6.3 bytestring-0.10.8.2 containers-0.5.10.2
                      deepseq-1.4.3.0 fixed-0.2.1.1 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      gloss-1.11.1.1 gloss-rendering-1.11.1.1 half-0.2.2.3
                      integer-gmp-1.0.1.0 pretty-1.1.3.3 primitive-0.6.2.0 random-1.1
                      stm-2.4.4.1 template-haskell-2.12.0.0 text-1.2.2.2 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.2.0
orphans: transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.4.1:Control.Monad.STM text-1.2.2.2:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.2.2:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0:Control.Monad.Primitive
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text
import  -/  QuickCheck-2.10.1:Test.QuickCheck e7cc3bba148aa39b704c2b95e2084a35
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Tuple 8fa1305aa5032ea35e2a54fa5f1e78f9
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  GameSettings 61d2a1e958f0b59a2cf36e3ede7af58a
  exports: 044aa57492f2bc97370b52b50dbe2e24
  sizeOfBoard a8d802b621aed8ed3c285b99f12cd26a
import  -/  GameState 8acd50b608ce6b3d98f8794a54aa4079
  exports: c8cecce746904f3520e2c67cee428f1f
  Position 9b66e2b9ae1f48a2fc148b75d149bea2
import  -/  UpdateGame 7293d57cf824e2462c69fb452e6b3b98
  exports: ee87f42c4e9a95da6e7af1eff1fca0ce
  ateApple 9eb923292b23b34033894c63893dccc4
  hasCollisionOccured 0dfdeccb0731e5a75bb5e6e548bb4820
7f97200d4c7fe24a7bdb7ceaeef019c2
  $s$fEq(,) :: GHC.Classes.Eq (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqInt)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqInt) -}
e25737fb65bddb1cf71ee052792cccea
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   QuickCheck.$trModule3
                   QuickCheck.$trModule1) -}
bddc0523c789a796b570d4afd5f05d88
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS QuickCheck.$trModule2) -}
226275e7605b6293488349fc31d1ef4a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("QuickCheck"#) -}
19ce384adfd023e48e1c9d4e5532e02b
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS QuickCheck.$trModule4) -}
0f060c28d2dc8c5c5a8af98da2c705f8
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
9fe4d4a13f235d176c7a41e917ab7d53
  propCollision :: [GameState.Position] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GameState.Position]) ->
                 case ds of wild {
                   [] -> GHC.Types.True
                   : ipv ipv1
                   -> case UpdateGame.hasCollisionOccured wild of wild1 {
                        GHC.Types.False -> QuickCheck.withOutCollision wild
                        GHC.Types.True
                        -> case GHC.List.elem
                                  @ (GHC.Types.Int, GHC.Types.Int)
                                  QuickCheck.$s$fEq(,)
                                  ipv
                                  ipv1 of wild2 {
                             GHC.Types.False
                             -> case ipv of wild3 { (,) x ds1 ->
                                case x of wild4 { GHC.Types.I# x1 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# x1 12#) of wild5 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.># x1 -12#) of wild6 {
                                       GHC.Types.False -> GHC.Types.True
                                       GHC.Types.True
                                       -> case ds1 of wild7 { GHC.Types.I# x2 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.<# x2 12#) of wild8 {
                                            GHC.Types.False -> GHC.Types.True
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.># x2 -12#) of wild9 {
                                                 GHC.Types.False -> GHC.Types.True
                                                 GHC.Types.True -> GHC.Types.False } } } } } } }
                             GHC.Types.True -> GHC.Types.True } } }) -}
8e143648d5d170bed5b9e5e63b1609e5
  propPlaceOfApple :: [GameState.Position] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GameState.Position]) ->
                 case ds of wild {
                   [] -> GHC.Types.True
                   : ipv ipv1
                   -> case UpdateGame.ateApple wild of wild1 { (,) x ds1 ->
                      case x of wild2 { GHC.Types.I# x1 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# x1 12#) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># x1 -12#) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ds1 of wild5 { GHC.Types.I# x2 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# x2 12#) of wild6 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.># x2 -12#) } } } } } } }) -}
0d0fac24ed719d1bec0e4999cb6d4539
  withOutCollision ::
    [(GHC.Types.Int, GHC.Types.Int)] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [(GHC.Types.Int, GHC.Types.Int)]) ->
                 case ds of wild {
                   [] -> QuickCheck.withOutCollision1
                   : xy xys
                   -> case GHC.List.elem
                             @ (GHC.Types.Int, GHC.Types.Int)
                             QuickCheck.$s$fEq(,)
                             xy
                             xys of wild1 {
                        GHC.Types.False
                        -> case xy of wild2 { (,) x ds1 ->
                           case x of wild3 { GHC.Types.I# x1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x1 12#) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.># x1 -12#) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case ds1 of wild6 { GHC.Types.I# x2 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# x2 12#) of wild7 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.># x2 -12#) } } } } } }
                        GHC.Types.True -> GHC.Types.False } }) -}
b9e0824af2541516fef90aa11df28ad8
  withOutCollision1 :: GHC.Types.Bool
  {- Strictness: x -}
"SPEC/QuickCheck $fEq(,) @ Int @ Int" [orphan] forall (v1 :: GHC.Classes.Eq
                                                               GHC.Types.Int)
                                                      (v :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,) @ GHC.Types.Int @ GHC.Types.Int v v1
  = QuickCheck.$s$fEq(,)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

