
==================== FINAL INTERFACE ====================
2018-01-21 17:08:36.876645 UTC

interface main:UpdateGame 8022
  interface hash: 422ace4a37ef6c09f15ab738b81a630c
  ABI hash: ee4c5c1620381103ce4d661f362e7ea1
  export-list hash: ee87f42c4e9a95da6e7af1eff1fca0ce
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1c6f65d52f53d3e6bedf9b8d55a3afa1
  sig of: Nothing
  used TH splices: False
  where
exports:
  UpdateGame.ateApple
  UpdateGame.hasCollisionOccured
  UpdateGame.moveSnake
  UpdateGame.update
module dependencies: GameSettings GameState
package dependencies: GLURaw-2.0.0.3 GLUT-2.7.0.12
                      ObjectName-1.1.0.1 OpenGL-3.0.2.0 OpenGLRaw-3.2.7.0
                      StateVar-1.1.0.4 array-0.5.2.0 base-4.10.1.0 binary-0.8.5.1
                      bmp-1.2.6.3 bytestring-0.10.8.2 containers-0.5.10.2 deepseq-1.4.3.0
                      fixed-0.2.1.1 ghc-prim-0.5.1.1 gloss-1.11.1.1
                      gloss-rendering-1.11.1.1 half-0.2.2.3 integer-gmp-1.0.1.0
                      stm-2.4.4.1 text-1.2.2.2
orphans: gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.4.1:Control.Monad.STM text-1.2.2.2:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.2.2:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         text-1.2.2.2:Data.Text
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.List 4ab7fa2a1b87502b23af891a384f0506
import  -/  base-4.10.1.0:Data.OldList 555420b092ca8cf0a8f9666bc0e07dcf
import  -/  base-4.10.1.0:Data.Tuple 8fa1305aa5032ea35e2a54fa5f1e78f9
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  gloss-1.11.1.1:Graphics.Gloss 42927f6b8c3c9969ac9a5d586179f98b
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.ViewPort e3a26d6e96e6a33b79cbc9b4d07171f7
import  -/  GameSettings 97c2907765be7873f81a15daf4a1311f
  exports: 9e7c4cfb78ea15b7dd5ff3194c2d8876
  rewardForEatingApple 303c8dbac0757e0047281654107b75b5
  sizeOfBoard 821fd2952cb158c53fd36647f3719996
import  -/  GameState 8c8acccd5704b9a1a01c50dc08d44098
  exports: 7d6b3aaba4df857c2308415979c3e78e
  Game 7c09563d6d9794dfbb87c0be4f4e1925
  GameState c3ad132db64c3b403b1d7aaf8cdd213e
  Position 9b66e2b9ae1f48a2fc148b75d149bea2
  applePos c3ad132db64c3b403b1d7aaf8cdd213e
  changeOfOrientation c3ad132db64c3b403b1d7aaf8cdd213e
  isEnded c3ad132db64c3b403b1d7aaf8cdd213e
  orientation c3ad132db64c3b403b1d7aaf8cdd213e
  orientationToPosition e420451c3f655885783b97981f34ade9
  snakeBody c3ad132db64c3b403b1d7aaf8cdd213e
  tilesToBeAdded c3ad132db64c3b403b1d7aaf8cdd213e
5e4582f7866ee5bdf1adf2555a10de23
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   UpdateGame.$trModule3
                   UpdateGame.$trModule1) -}
626069a65ed7d7fd82584ad50fad8caf
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS UpdateGame.$trModule2) -}
1c8c3d20d483cc40c57265978da35341
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("UpdateGame"#) -}
b90731bd879fd88759ee65eab26e83a5
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS UpdateGame.$trModule4) -}
06618909ea673c9c45a34d348016247d
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
10e1b734f80f3175612e370da810652f
  $wmoveSnake ::
    [GameState.Position]
    -> GameState.Orientation
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> (# [GameState.Position], GHC.Types.Int #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U)><S,1*U>, Inline: [0] -}
0270439ab1a2d8ac495cb279d2ceacef
  $wupdate ::
    GameState.GameState
    -> (# [GameState.Position], GameState.Position,
          GameState.Orientation, GHC.Types.Int, GHC.Types.Bool,
          GHC.Types.Bool #)
  {- Arity: 1, Strictness: <L,U(U,U(U(U),U(U)),U,U(U),1*U,A)>,
     Inline: [0],
     Unfolding: (\ (w :: GameState.GameState) ->
                 let {
                   ds :: ([GameState.Position], GHC.Types.Int)
                   = case w of ww { GameState.Game ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case UpdateGame.$wmoveSnake
                            ww1
                            ww3
                            ww4
                            ww5 of ww7 { (#,#) ww8 ww9 ->
                     (ww8, ww9) } }
                 } in
                 let {
                   newSnakeBody :: [GameState.Position]
                   = case ds of wild { (,) newSnakeBody1 newTilesToBeAdded ->
                     newSnakeBody1 }
                 } in
                 let {
                   isAppleEaten :: GHC.Types.Bool
                   = case w of wild { GameState.Game ds1 ds2 ds3 ds4 ds5 ds6 ->
                     case newSnakeBody of wild1 {
                       [] -> case GHC.List.badHead ret_ty GHC.Types.Bool of {}
                       : x ds7
                       -> case ds2 of ww { (,) ww1 ww2 ->
                          case x of ww3 { (,) ww4 ww5 ->
                          case ww1 of wild2 { GHC.Types.I# x1 ->
                          case ww4 of wild3 { GHC.Types.I# y ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# x1 y) of wild4 {
                            GHC.Types.False -> GHC.Types.False
                            GHC.Types.True
                            -> case ww2 of wild5 { GHC.Types.I# x2 ->
                               case ww5 of wild6 { GHC.Types.I# y1 ->
                               GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# x2 y1) } } } } } } } } }
                 } in
                 (# newSnakeBody,
                    case isAppleEaten of wild {
                      GHC.Types.False -> GameState.applePos w
                      GHC.Types.True -> UpdateGame.ateApple newSnakeBody },
                    GameState.orientation w,
                    case isAppleEaten of wild {
                      GHC.Types.False
                      -> case ds of wild1 { (,) newSnakeBody1 newTilesToBeAdded ->
                         newTilesToBeAdded }
                      GHC.Types.True
                      -> case ds of wild1 { (,) newSnakeBody1 newTilesToBeAdded ->
                         case newTilesToBeAdded of wild2 { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.+# x 3#) } } },
                    UpdateGame.hasCollisionOccured newSnakeBody, GHC.Types.False #)) -}
fa2e4ce84d04ba2f1b8f1d2b52bec9dc
  ateApple :: [GameState.Position] -> GameState.Position
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (newSnakeBody :: [GameState.Position]) ->
                 let {
                   freeBoard :: [(GHC.Types.Int, GHC.Types.Int)]
                   = UpdateGame.ateApple_go1 newSnakeBody UpdateGame.ateApple1
                 } in
                 case GHC.List.$wlenAcc
                        @ (GHC.Types.Int, GHC.Types.Int)
                        freeBoard
                        0# of ww2 {
                   DEFAULT
                   -> letrec {
                        go :: [GameState.Position]
                              -> GameState.Position -> (GHC.Types.Int, GHC.Types.Int)
                          <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U(1*U(U),A)> -}
                        = \ (ds :: [GameState.Position]) (eta :: GameState.Position) ->
                          case ds of wild {
                            []
                            -> case eta of wild1 { (,) x ds1 ->
                               case x of wild2 { GHC.Types.I# y ->
                               letrec {
                                 go1 :: [GameState.Position]
                                        -> GameState.Position -> (GHC.Types.Int, GHC.Types.Int)
                                   <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U(A,1*U(U))> -}
                                 = \ (ds2 :: [GameState.Position]) (eta1 :: GameState.Position) ->
                                   case ds2 of wild3 {
                                     []
                                     -> case eta1 of wild4 { (,) ds3 y1 ->
                                        case y1 of wild5 { GHC.Types.I# y2 ->
                                        case newSnakeBody of wild6 {
                                          []
                                          -> case GHC.List.badHead
                                             ret_ty (GHC.Types.Int, GHC.Types.Int)
                                             of {}
                                          : x1 ds4
                                          -> case x1 of wild7 { (,) x2 ds5 ->
                                             case x2 of wild8 { GHC.Types.I# y3 ->
                                             case ds5 of wild9 { GHC.Types.I# y4 ->
                                             case GHC.Classes.modInt#
                                                    (GHC.Prim.+#
                                                       (GHC.Prim.+#
                                                          (GHC.Prim.+#
                                                             (GHC.Prim.*# 5# (GHC.Prim.+# 17# y))
                                                             (GHC.Prim.*# 25# (GHC.Prim.+# 17# y2)))
                                                          (GHC.Prim.*# 125# (GHC.Prim.+# 17# y3)))
                                                       (GHC.Prim.*# 625# (GHC.Prim.+# 17# y4)))
                                                    ww2 of ww1 { DEFAULT ->
                                             GHC.List.$w!!
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               freeBoard
                                               ww1 } } } } } } }
                                     : y1 ys -> go1 ys y1 }
                               } in
                               go1 newSnakeBody (GHC.List.lastError @ GameState.Position) } }
                            : y ys -> go ys y }
                      } in
                      go newSnakeBody (GHC.List.lastError @ GameState.Position)
                   -1# -> GHC.List.$w!! @ (GHC.Types.Int, GHC.Types.Int) freeBoard 0#
                   0#
                   -> case GHC.Real.divZeroError
                      ret_ty (GHC.Types.Int, GHC.Types.Int)
                      of {} }) -}
60017b856637cee1db50f5d660dd81fa
  ateApple1 :: [(GHC.Types.Int, GHC.Types.Int)]
  {- Unfolding: (UpdateGame.ateApple_go -7#) -}
90736ae559fadca7948a46686921450c
  ateApple_go :: GHC.Prim.Int# -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, Strictness: <L,U> -}
81051f9883c76505a637568b08ff5446
  ateApple_go1 ::
    [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
7f9f9f084866935c17f7f34d59eed885
  hasCollisionOccured :: [GameState.Position] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GameState.Position]) ->
                 case ds of wild {
                   [] -> GHC.Types.False
                   : ipv ipv1
                   -> case ipv of wild1 { (,) x ds1 ->
                      case x of wild2 { GHC.Types.I# x1 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x1 8#) of wild3 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x1 -8#) of wild4 {
                             GHC.Types.False
                             -> case ds1 of wild5 { GHC.Types.I# x2 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.>=# x2 8#) of wild6 {
                                  GHC.Types.False
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# x2 -8#) of wild7 {
                                       GHC.Types.False
                                       -> letrec {
                                            go :: [GameState.Position] -> GHC.Types.Bool
                                              <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                            = \ (ds2 :: [GameState.Position]) ->
                                              case ds2 of wild8 {
                                                [] -> GHC.Types.False
                                                : y ys
                                                -> case y of ww { (,) ww1 ww2 ->
                                                   case ww1 of wild9 { GHC.Types.I# x3 ->
                                                   case GHC.Prim.tagToEnum#
                                                          @ GHC.Types.Bool
                                                          (GHC.Prim.==# x3 x1) of wild10 {
                                                     GHC.Types.False -> go ys
                                                     GHC.Types.True
                                                     -> case ww2 of wild11 { GHC.Types.I# x4 ->
                                                        case GHC.Prim.tagToEnum#
                                                               @ GHC.Types.Bool
                                                               (GHC.Prim.==# x4 x2) of wild12 {
                                                          GHC.Types.False -> go ys
                                                          GHC.Types.True
                                                          -> GHC.Types.True } } } } } }
                                          } in
                                          go ipv1
                                       GHC.Types.True -> GHC.Types.True }
                                  GHC.Types.True -> GHC.Types.True } }
                             GHC.Types.True -> GHC.Types.True }
                        GHC.Types.True -> GHC.Types.True } } } }) -}
309b62ba16b5b961c31b739e3c8a32d3
  moveSnake ::
    GameState.GameState -> ([GameState.Position], GHC.Types.Int)
  {- Arity: 1, Strictness: <S(LLLLSL),1*U(U,A,U,U(U),1*U,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GameState.GameState) ->
                 case w of ww { GameState.Game ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case UpdateGame.$wmoveSnake
                        ww1
                        ww3
                        ww4
                        ww5 of ww7 { (#,#) ww8 ww9 ->
                 (ww8, ww9) } }) -}
b52d3d31b303c10ce3337863f71a0fda
  update ::
    GHC.Types.Float -> GameState.GameState -> GameState.GameState
  {- Arity: 2, Strictness: <L,A><L,U(U,U(U(U),U(U)),U,U(U),U,A)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Float) (w1 :: GameState.GameState) ->
                 case UpdateGame.$wupdate
                        w1 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 GameState.Game ww1 ww2 ww3 ww4 ww5 ww6 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

