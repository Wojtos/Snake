
==================== FINAL INTERFACE ====================
2018-01-20 16:51:33.238572 UTC

interface main:SnakeGame 8022
  interface hash: 51165e5dce8b76abad16dfdc20b32a8d
  ABI hash: 0fefd4b32e93e31e3bd31d5dc3e191c8
  export-list hash: e040347675e83beeb2acd9d2ee7d3ffc
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1c6f65d52f53d3e6bedf9b8d55a3afa1
  sig of: Nothing
  used TH splices: False
  where
exports:
  SnakeGame.orientationToInt
  SnakeGame.Orientation{SnakeGame.Down SnakeGame.Left SnakeGame.Right SnakeGame.Up}
  SnakeGame.Postion
  SnakeGame.SnakeGame{SnakeGame.Game applePos orientation snakeBody}
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
5e62bb832ccced2f7ac1c90b743dd104
  $fEqOrientation :: GHC.Classes.Eq SnakeGame.Orientation
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ SnakeGame.Orientation
                  SnakeGame.$fEqOrientation_$c==
                  SnakeGame.$fEqOrientation_$c/= -}
5e62bb832ccced2f7ac1c90b743dd104
  $fEqOrientation_$c/= ::
    SnakeGame.Orientation -> SnakeGame.Orientation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: SnakeGame.Orientation)
                   (b :: SnakeGame.Orientation) ->
                 case a of wild {
                   SnakeGame.Up
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True SnakeGame.Up -> GHC.Types.False }
                   SnakeGame.Right
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True SnakeGame.Right -> GHC.Types.False }
                   SnakeGame.Down
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True SnakeGame.Down -> GHC.Types.False }
                   SnakeGame.Left
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True SnakeGame.Left -> GHC.Types.False } }) -}
5e62bb832ccced2f7ac1c90b743dd104
  $fEqOrientation_$c== ::
    SnakeGame.Orientation -> SnakeGame.Orientation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: SnakeGame.Orientation)
                   (ds1 :: SnakeGame.Orientation) ->
                 case ds of wild {
                   SnakeGame.Up
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SnakeGame.Up -> GHC.Types.True }
                   SnakeGame.Right
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SnakeGame.Right -> GHC.Types.True }
                   SnakeGame.Down
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SnakeGame.Down -> GHC.Types.True }
                   SnakeGame.Left
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False SnakeGame.Left -> GHC.Types.True } }) -}
c1c6e56d9df13458b4bf42e0cb1ccd9c
  $tc'Down :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10882138425523019783##
                   11335064890437904947##
                   SnakeGame.$trModule
                   SnakeGame.$tc'Down2
                   0#
                   SnakeGame.$tc'Down1) -}
aa46c452743ffeba25f10a48eb8841ff
  $tc'Down1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
4e6860f207831718423e5f05df491072
  $tc'Down2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SnakeGame.$tc'Down3) -}
31731f2d092ef9a66514f0da28d6012c
  $tc'Down3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Down"#) -}
ee363c4812cfc788aa7851d62a4f57a3
  $tc'Game :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13199607049627927544##
                   13616090666183955159##
                   SnakeGame.$trModule
                   SnakeGame.$tc'Game2
                   0#
                   SnakeGame.$tc'Game1) -}
1fa644b9d4f139c8cb2946e633253436
  $tc'Game1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
98fce50759e7453c7c62dc00816dbab2
  $tc'Game2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SnakeGame.$tc'Game3) -}
24de97deb20a035c8700bbfcb39086f1
  $tc'Game3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Game"#) -}
5af0080015778972544e03832f150488
  $tc'Left :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6395703544874677539##
                   16363046355576025843##
                   SnakeGame.$trModule
                   SnakeGame.$tc'Left1
                   0#
                   SnakeGame.$tc'Down1) -}
7dd5eaa3423b85a5d221fe7c7f16b9d1
  $tc'Left1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SnakeGame.$tc'Left2) -}
1d9895f16e120bbf7d70e6e184f7d2bc
  $tc'Left2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Left"#) -}
967b4fe9524ae28134c2b0b4e253cefd
  $tc'Right :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8203394493500546848##
                   3899208418963342023##
                   SnakeGame.$trModule
                   SnakeGame.$tc'Right1
                   0#
                   SnakeGame.$tc'Down1) -}
b9eb88e48e5c51abb472ec3830c1e1de
  $tc'Right1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SnakeGame.$tc'Right2) -}
75af8ae13a644f87d1df89c2c72fb881
  $tc'Right2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Right"#) -}
0dfc880bd8bbf71d9c9d88f51008f490
  $tc'Up :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11949811862758470485##
                   12361649691026295375##
                   SnakeGame.$trModule
                   SnakeGame.$tc'Up1
                   0#
                   SnakeGame.$tc'Down1) -}
d6b99dfa88afa35dee09089176dfe3b4
  $tc'Up1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SnakeGame.$tc'Up2) -}
777ac92a1eecbfbef18bd9448b7c8e81
  $tc'Up2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Up"#) -}
5b314b7c9f67db867b89a2cd0a64c7fc
  $tcOrientation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6073055869881866515##
                   58132676490248080##
                   SnakeGame.$trModule
                   SnakeGame.$tcOrientation1
                   0#
                   GHC.Types.krep$*) -}
482b8ac15d21e8590f635299b2bb422b
  $tcOrientation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SnakeGame.$tcOrientation2) -}
f6252345d4598fbd251343d2cd175c62
  $tcOrientation2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Orientation"#) -}
3e432202fbe607da48c6c3ae72dc0316
  $tcSnakeGame :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16671391340283188904##
                   15967217400011546453##
                   SnakeGame.$trModule
                   SnakeGame.$trModule1
                   0#
                   GHC.Types.krep$*) -}
5f9f3eaa39785c4b9f41c0a8d7f4d6fc
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SnakeGame.$trModule3
                   SnakeGame.$trModule1) -}
e18f2f7f543d9fa1579713dcddcfc635
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SnakeGame.$trModule2) -}
670e7d77ad92eb036b94aa0367ebc94e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SnakeGame"#) -}
def9dc422007895851cdb7c1a175da69
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS SnakeGame.$trModule4) -}
fb487555aaca5b2c3fc2e91c1796a021
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
5e62bb832ccced2f7ac1c90b743dd104
  data Orientation = Up | Right | Down | Left
d06333dd63bf19e12384543dadcd5db3
  type Postion = (GHC.Types.Int, GHC.Types.Int)
6e604c2be8f76aa59d470d45b4356bfd
  data SnakeGame
    = Game {snakeBody :: [SnakeGame.Postion],
            applePos :: SnakeGame.Postion,
            orientation :: SnakeGame.Orientation}
6e604c2be8f76aa59d470d45b4356bfd
  applePos :: SnakeGame.SnakeGame -> SnakeGame.Postion
  RecSel Left SnakeGame.SnakeGame
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: SnakeGame.SnakeGame) ->
                 case ds of wild { SnakeGame.Game ds1 ds2 ds3 -> ds2 }) -}
6e604c2be8f76aa59d470d45b4356bfd
  orientation :: SnakeGame.SnakeGame -> SnakeGame.Orientation
  RecSel Left SnakeGame.SnakeGame
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: SnakeGame.SnakeGame) ->
                 case ds of wild { SnakeGame.Game ds1 ds2 ds3 -> ds3 }) -}
acd63e98ca4d964175e31d1c30b9bece
  orientationToInt :: SnakeGame.Orientation -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: SnakeGame.Orientation) ->
                 case x of wild {
                   SnakeGame.Up -> SnakeGame.orientationToInt4
                   SnakeGame.Right -> SnakeGame.orientationToInt3
                   SnakeGame.Down -> SnakeGame.orientationToInt2
                   SnakeGame.Left -> SnakeGame.orientationToInt1 }) -}
5705a296fc7254488d2d8edec1fde9ad
  orientationToInt1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
ed11c35826338c277971a4f36b76a73e
  orientationToInt2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
d1c68f438f5cca34bbc075de6a64ee9e
  orientationToInt3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
50934c41132db8b0bb706ca2e74dd9e3
  orientationToInt4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
6e604c2be8f76aa59d470d45b4356bfd
  snakeBody :: SnakeGame.SnakeGame -> [SnakeGame.Postion]
  RecSel Left SnakeGame.SnakeGame
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: SnakeGame.SnakeGame) ->
                 case ds of wild { SnakeGame.Game ds1 ds2 ds3 -> ds1 }) -}
instance [safe] GHC.Classes.Eq [SnakeGame.Orientation]
  = SnakeGame.$fEqOrientation
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

