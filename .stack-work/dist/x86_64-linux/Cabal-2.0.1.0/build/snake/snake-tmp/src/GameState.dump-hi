
==================== FINAL INTERFACE ====================
2018-01-23 20:30:34.579129 UTC

interface main:GameState 8022
  interface hash: 53ef84924d3074ea78d56bc3fe0ec2ec
  ABI hash: 8acd50b608ce6b3d98f8794a54aa4079
  export-list hash: c8cecce746904f3520e2c67cee428f1f
  orphan hash: 941101ba7fadcb50135c411b4eb62214
  flag hash: 1c6f65d52f53d3e6bedf9b8d55a3afa1
  sig of: Nothing
  used TH splices: False
  where
exports:
  GameState.initialGameState
  GameState.orientationToInt
  GameState.orientationToPosition
  GameState.GameState{GameState.Game applePos changeOfOrientation isEnded orientation snakeBody tilesToBeAdded}
  GameState.Orientation{GameState.Down GameState.Left GameState.Right GameState.Up}
  GameState.Position
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
1387295e6596f0d70fba3d2d2f446eff
  $fEqGameState :: GHC.Classes.Eq GameState.GameState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameState.GameState
                  GameState.$fEqGameState_$c==
                  GameState.$fEqGameState_$c/= -}
1387295e6596f0d70fba3d2d2f446eff
  $fEqGameState_$c/= ::
    GameState.GameState -> GameState.GameState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,1*U(1*U(U),1*U(U)),1*U,1*U(U),1*U,1*U)><S(SLLLLL),1*U(1*U,1*U(1*U(U),1*U(U)),1*U,1*U(U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: GameState.GameState) (b :: GameState.GameState) ->
                 case GameState.$fEqGameState_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1387295e6596f0d70fba3d2d2f446eff
  $fEqGameState_$c== ::
    GameState.GameState -> GameState.GameState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,1*U(1*U(U),1*U(U)),1*U,1*U(U),1*U,1*U)><S(SLLLLL),1*U(1*U,1*U(1*U(U),1*U(U)),1*U,1*U(U),1*U,1*U)>,
     Unfolding: (\ (ds :: GameState.GameState)
                   (ds1 :: GameState.GameState) ->
                 case ds of wild { GameState.Game a1 a2 a3 a4 a5 a6 ->
                 case ds1 of wild1 { GameState.Game b1 b2 b3 b4 b5 b6 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (GHC.Types.Int, GHC.Types.Int)
                        GameState.$fEqGameState_$s$fEq(,)
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case a2 of ww { (,) ww1 ww2 ->
                      case b2 of ww3 { (,) ww4 ww5 ->
                      case ww1 of wild3 { GHC.Types.I# x ->
                      case ww4 of wild4 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild5 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of wild6 { GHC.Types.I# x1 ->
                           case ww5 of wild7 { GHC.Types.I# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x1 y1) of wild8 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> let {
                                  $j :: GHC.Types.Bool <join 0>
                                  = case a4 of wild9 { GHC.Types.I# x2 ->
                                    case b4 of wild10 { GHC.Types.I# y2 ->
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==# x2 y2) of wild11 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case a5 of wild12 {
                                           GHC.Types.False
                                           -> case b5 of wild13 {
                                                GHC.Types.False -> GHC.Classes.$fEqBool_$c== a6 b6
                                                GHC.Types.True -> GHC.Types.False }
                                           GHC.Types.True
                                           -> case b5 of wild13 {
                                                GHC.Types.False -> GHC.Types.False
                                                GHC.Types.True
                                                -> GHC.Classes.$fEqBool_$c== a6 b6 } } } } }
                                } in
                                case a3 of wild9 {
                                  GameState.Up
                                  -> case b3 of wild10 {
                                       DEFAULT -> GHC.Types.False GameState.Up -> $j }
                                  GameState.Right
                                  -> case b3 of wild10 {
                                       DEFAULT -> GHC.Types.False GameState.Right -> $j }
                                  GameState.Down
                                  -> case b3 of wild10 {
                                       DEFAULT -> GHC.Types.False GameState.Down -> $j }
                                  GameState.Left
                                  -> case b3 of wild10 {
                                       DEFAULT -> GHC.Types.False
                                       GameState.Left -> $j } } } } } } } } } } } } }) -}
972366f216a251fbf3c65d2d5b602b78
  $fEqGameState_$s$fEq(,) ::
    GHC.Classes.Eq (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqInt)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqInt) -}
585e8e0523042e64f83842f1a051a378
  $fEqOrientation :: GHC.Classes.Eq GameState.Orientation
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameState.Orientation
                  GameState.$fEqOrientation_$c==
                  GameState.$fEqOrientation_$c/= -}
585e8e0523042e64f83842f1a051a378
  $fEqOrientation_$c/= ::
    GameState.Orientation -> GameState.Orientation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: GameState.Orientation)
                   (b :: GameState.Orientation) ->
                 case a of wild {
                   GameState.Up
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GameState.Up -> GHC.Types.False }
                   GameState.Right
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GameState.Right -> GHC.Types.False }
                   GameState.Down
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GameState.Down -> GHC.Types.False }
                   GameState.Left
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GameState.Left -> GHC.Types.False } }) -}
585e8e0523042e64f83842f1a051a378
  $fEqOrientation_$c== ::
    GameState.Orientation -> GameState.Orientation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: GameState.Orientation)
                   (ds1 :: GameState.Orientation) ->
                 case ds of wild {
                   GameState.Up
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GameState.Up -> GHC.Types.True }
                   GameState.Right
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GameState.Right -> GHC.Types.True }
                   GameState.Down
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GameState.Down -> GHC.Types.True }
                   GameState.Left
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GameState.Left -> GHC.Types.True } }) -}
1387295e6596f0d70fba3d2d2f446eff
  $fShowGameState :: GHC.Show.Show GameState.GameState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameState.GameState
                  GameState.$fShowGameState_$cshowsPrec
                  GameState.$fShowGameState_$cshow
                  GameState.$fShowGameState_$cshowList -}
1387295e6596f0d70fba3d2d2f446eff
  $fShowGameState1 :: GameState.GameState -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(1*U,1*U(1*U(U),1*U(U)),1*U,1*U(U),1*U,1*U)><L,U>,
     Unfolding: (\ (w :: GameState.GameState) (w1 :: GHC.Base.String) ->
                 case w of ww { GameState.Game ww1 ww2 ww3 ww4 ww5 ww6 ->
                 GameState.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 ww6 w1 }) -}
54b129fc94f8227deea87e708bb17233
  $fShowGameState2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
1387295e6596f0d70fba3d2d2f446eff
  $fShowGameState_$cshow :: GameState.GameState -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U(1*U(U),1*U(U)),1*U,1*U(U),1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GameState.GameState) ->
                 GameState.$fShowGameState_$cshowsPrec
                   GameState.$fShowGameState2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1387295e6596f0d70fba3d2d2f446eff
  $fShowGameState_$cshowList ::
    [GameState.GameState] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GameState.GameState
                   GameState.$fShowGameState1) -}
1387295e6596f0d70fba3d2d2f446eff
  $fShowGameState_$cshowsPrec ::
    GHC.Types.Int -> GameState.GameState -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(1*U(U),1*U(U)),1*U,1*U(U),1*U,1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GameState.GameState)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GameState.Game ww3 ww4 ww5 ww6 ww7 ww8 ->
                 GameState.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 ww8 w2 } }) -}
585e8e0523042e64f83842f1a051a378
  $fShowOrientation :: GHC.Show.Show GameState.Orientation
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameState.Orientation
                  GameState.$fShowOrientation_$cshowsPrec
                  GameState.$fShowOrientation_$cshow
                  GameState.$fShowOrientation_$cshowList -}
e1708bce74863da219ae51bc20d62220
  $fShowOrientation1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   GameState.$fShowOrientation2) -}
56b3827404ebd51c6277e8f9a2205268
  $fShowOrientation2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Left"#) -}
dee0861b72c3dc1bbe387123f998c26b
  $fShowOrientation3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   GameState.$fShowOrientation4) -}
44b1903f860a88157b42bd02c9179d07
  $fShowOrientation4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Down"#) -}
d2f6281b03c92295ae5ec9407f3a6e79
  $fShowOrientation5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   GameState.$fShowOrientation6) -}
273870aae8031b069b228b0e723a4662
  $fShowOrientation6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Right"#) -}
a557f3e8ed335da9a0b3412002f463ca
  $fShowOrientation7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   GameState.$fShowOrientation8) -}
28ee731d86e76dbfcf54ff56d49bffdf
  $fShowOrientation8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Up"#) -}
585e8e0523042e64f83842f1a051a378
  $fShowOrientation_$cshow ::
    GameState.Orientation -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GameState.Orientation) ->
                 case x of wild {
                   GameState.Up -> GameState.$fShowOrientation7
                   GameState.Right -> GameState.$fShowOrientation5
                   GameState.Down -> GameState.$fShowOrientation3
                   GameState.Left -> GameState.$fShowOrientation1 }) -}
585e8e0523042e64f83842f1a051a378
  $fShowOrientation_$cshowList ::
    [GameState.Orientation] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GameState.Orientation
                   GameState.$w$cshowsPrec1) -}
585e8e0523042e64f83842f1a051a378
  $fShowOrientation_$cshowsPrec ::
    GHC.Types.Int -> GameState.Orientation -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GameState.Orientation)
                   (w2 :: GHC.Base.String) ->
                 GameState.$w$cshowsPrec1 w1 w2) -}
51fd731bcb76d930713634f204469e8c
  $tc'Down :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16239416253458364129##
                   6314193503466062631##
                   GameState.$trModule
                   GameState.$tc'Down2
                   0#
                   GameState.$tc'Down1) -}
6bba897a58aa57c428e004a8b4726356
  $tc'Down1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
e8bda390bf015e0089e2953cf41e18bd
  $tc'Down2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameState.$tc'Down3) -}
813a9fc6bb6ff982aef051ebd7e7f72c
  $tc'Down3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Down"#) -}
f5f55b00e391633cb2dde35808f747a9
  $tc'Game :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1399241134460694333##
                   1426436652187366257##
                   GameState.$trModule
                   GameState.$tc'Game2
                   0#
                   GameState.$tc'Game1) -}
0cf9b709d3fb257cebab90e4f7d0f51d
  $tc'Game1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
da96d15c9c9e790595e099fb02f43423
  $tc'Game2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameState.$tc'Game3) -}
241f4a5609bf212f65e62ec8e2c6ac4c
  $tc'Game3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Game"#) -}
fe6ff7c7311bc603cb11ba7e5e5e7ed8
  $tc'Left :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17157309165823348427##
                   2827598764721862110##
                   GameState.$trModule
                   GameState.$tc'Left1
                   0#
                   GameState.$tc'Down1) -}
6687d158638bbd51742113bfead03137
  $tc'Left1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameState.$tc'Left2) -}
3a1277351cff105ca9492e598e30e494
  $tc'Left2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Left"#) -}
dbcf00e74cf192146246d10dcb676149
  $tc'Right :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5168745038257613318##
                   8603448643400439369##
                   GameState.$trModule
                   GameState.$tc'Right1
                   0#
                   GameState.$tc'Down1) -}
f77257401e3bd2ad30fcd4c88051d27b
  $tc'Right1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameState.$tc'Right2) -}
2373538cc3157f0ba567ae8612742ad9
  $tc'Right2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Right"#) -}
a2176b9bb3c40b20b8d09260dcd6e42e
  $tc'Up :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1119854566878702067##
                   1534771386706711875##
                   GameState.$trModule
                   GameState.$tc'Up1
                   0#
                   GameState.$tc'Down1) -}
23eba2a766e9816962c25ce300048a13
  $tc'Up1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameState.$tc'Up2) -}
3a0bdc2aaacdbe7fe07bd00fa4f0fc41
  $tc'Up2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Up"#) -}
dfb02c2c4fdbda2a6c87b16640970362
  $tcGameState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7786766542521882612##
                   12427255979470769624##
                   GameState.$trModule
                   GameState.$trModule1
                   0#
                   GHC.Types.krep$*) -}
f1eb500d897d4e126c49406dbcadd0ee
  $tcOrientation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14131255298378828576##
                   6943859069111136985##
                   GameState.$trModule
                   GameState.$tcOrientation1
                   0#
                   GHC.Types.krep$*) -}
ad413e1f7bee8309ee08c85507c192f3
  $tcOrientation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameState.$tcOrientation2) -}
091303f54fda8591dfd446e2123b7f0b
  $tcOrientation2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Orientation"#) -}
25575bd6db54d584fe62c7fd51071446
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   GameState.$trModule3
                   GameState.$trModule1) -}
453932ed5d958bf4600a03cbee3f421c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameState.$trModule2) -}
52c9037d52099eacd14ecf874b45d2ee
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GameState"#) -}
1b63384f6c79de2f8021327818bec06b
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameState.$trModule4) -}
6a0a786aa56b700db036cc59b3ce552d
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
6ea2c3878a62db7755af1bbd65b23c9a
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> [GameState.Position]
    -> GameState.Position
    -> GameState.Orientation
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 8,
     Strictness: <S,U><L,1*U><L,1*U(1*U(U),1*U(U))><L,1*U><L,1*U(U)><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
585e8e0523042e64f83842f1a051a378
  $w$cshowsPrec1 ::
    GameState.Orientation -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: GameState.Orientation)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   GameState.Up
                   -> GHC.Base.++ @ GHC.Types.Char GameState.$fShowOrientation7 w1
                   GameState.Right
                   -> GHC.Base.++ @ GHC.Types.Char GameState.$fShowOrientation5 w1
                   GameState.Down
                   -> GHC.Base.++ @ GHC.Types.Char GameState.$fShowOrientation3 w1
                   GameState.Left
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GameState.$fShowOrientation1
                        w1 }) -}
1387295e6596f0d70fba3d2d2f446eff
  data GameState
    = Game {snakeBody :: [GameState.Position],
            applePos :: GameState.Position,
            orientation :: GameState.Orientation,
            tilesToBeAdded :: GHC.Types.Int,
            isEnded :: GHC.Types.Bool,
            changeOfOrientation :: GHC.Types.Bool}
585e8e0523042e64f83842f1a051a378
  data Orientation = Up | Right | Down | Left
9b66e2b9ae1f48a2fc148b75d149bea2
  type Position = (GHC.Types.Int, GHC.Types.Int)
1387295e6596f0d70fba3d2d2f446eff
  applePos :: GameState.GameState -> GameState.Position
  RecSel Left GameState.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U(U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameState.GameState) ->
                 case ds of wild { GameState.Game ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds2 }) -}
1387295e6596f0d70fba3d2d2f446eff
  changeOfOrientation :: GameState.GameState -> GHC.Types.Bool
  RecSel Left GameState.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameState.GameState) ->
                 case ds of wild { GameState.Game ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
c47c58f20e827568559e18c00017ce6f
  initialGameState :: GameState.GameState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GameState.Game
                   GameState.initialGameState4
                   GameState.initialGameState2
                   GameState.Left
                   GameState.initialGameState1
                   GHC.Types.False
                   GHC.Types.False) -}
5f686c7784a6f853d12f501d0b886443
  initialGameState1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
a425f35c7d6a7984c62f5fc0cb1421ce
  initialGameState2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GameState.initialGameState3,
                  GameState.$fShowGameState2)) -}
90fbc45d8a68138b14957ac9399325e0
  initialGameState3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
26c76444511aa6a7bd1b4288f18b810d
  initialGameState4 :: [GameState.Position]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameState.Position
                   GameState.initialGameState5
                   (GHC.Types.[] @ GameState.Position)) -}
2f23e81c72776e5da0a7250b636b9664
  initialGameState5 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GameState.$fShowGameState2,
                  GameState.$fShowGameState2)) -}
1387295e6596f0d70fba3d2d2f446eff
  isEnded :: GameState.GameState -> GHC.Types.Bool
  RecSel Left GameState.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameState.GameState) ->
                 case ds of wild { GameState.Game ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
1387295e6596f0d70fba3d2d2f446eff
  orientation :: GameState.GameState -> GameState.Orientation
  RecSel Left GameState.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameState.GameState) ->
                 case ds of wild { GameState.Game ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
a0a973624073b0dd180c0b914aa48c9f
  orientationToInt :: GameState.Orientation -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GameState.Orientation) ->
                 case x of wild {
                   GameState.Up -> GameState.$fShowGameState2
                   GameState.Right -> GameState.initialGameState3
                   GameState.Down -> GameState.orientationToInt1
                   GameState.Left -> GameState.initialGameState1 }) -}
7cbda304f544fd7e6038d90208255d31
  orientationToInt1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
95697864126c73d20a7e4a0bdbc5f5b9
  orientationToPosition ::
    GameState.Orientation -> GameState.Position
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GameState.Orientation) ->
                 case x of wild {
                   GameState.Up -> GameState.orientationToPosition4
                   GameState.Right -> GameState.initialGameState2
                   GameState.Down -> GameState.orientationToPosition3
                   GameState.Left -> GameState.orientationToPosition1 }) -}
b8ce3dc3cf6011d37171b69e9f941980
  orientationToPosition1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GameState.orientationToPosition2,
                  GameState.$fShowGameState2)) -}
a070ceab4c8514654fadff71e219ab5e
  orientationToPosition2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
be23619bf4a57562af8053db498f0e6e
  orientationToPosition3 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GameState.$fShowGameState2,
                  GameState.orientationToPosition2)) -}
5691187691b5d8967426d0a4ba5a312f
  orientationToPosition4 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GameState.$fShowGameState2,
                  GameState.initialGameState3)) -}
1387295e6596f0d70fba3d2d2f446eff
  snakeBody :: GameState.GameState -> [GameState.Position]
  RecSel Left GameState.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameState.GameState) ->
                 case ds of wild { GameState.Game ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds1 }) -}
1387295e6596f0d70fba3d2d2f446eff
  tilesToBeAdded :: GameState.GameState -> GHC.Types.Int
  RecSel Left GameState.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameState.GameState) ->
                 case ds of wild { GameState.Game ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
instance [safe] GHC.Classes.Eq [GameState.GameState]
  = GameState.$fEqGameState
instance [safe] GHC.Classes.Eq [GameState.Orientation]
  = GameState.$fEqOrientation
instance [safe] GHC.Show.Show [GameState.GameState]
  = GameState.$fShowGameState
instance [safe] GHC.Show.Show [GameState.Orientation]
  = GameState.$fShowOrientation
"SPEC/GameState $fEq(,) @ Int @ Int" [orphan] forall (v1 :: GHC.Classes.Eq
                                                              GHC.Types.Int)
                                                     (v :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,) @ GHC.Types.Int @ GHC.Types.Int v v1
  = GameState.$fEqGameState_$s$fEq(,)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

