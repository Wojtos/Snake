
==================== FINAL INTERFACE ====================
2018-01-20 20:54:10.472453 UTC

interface main:GameState 8022
  interface hash: 1b893a2a6ebfcb35bd42feb5bb05ac0c
  ABI hash: f55de4d8fd383a980a004bc8ebc8a8c7
  export-list hash: b040005083cbdb0c0a388c6a155d3345
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1c6f65d52f53d3e6bedf9b8d55a3afa1
  sig of: Nothing
  used TH splices: False
  where
exports:
  GameState.initialGameState
  GameState.orientationToInt
  GameState.orientationToPosition
  GameState.GameState{GameState.Game applePos orientation snakeBody tilesToBeAdded}
  GameState.Orientation{GameState.Down GameState.Left GameState.Right GameState.Up}
  GameState.Position
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
3d290f688c88cbe1ac3d75314640f7a7
  $fEqOrientation :: GHC.Classes.Eq GameState.Orientation
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameState.Orientation
                  GameState.$fEqOrientation_$c==
                  GameState.$fEqOrientation_$c/= -}
3d290f688c88cbe1ac3d75314640f7a7
  $fEqOrientation_$c/= ::
    GameState.Orientation -> GameState.Orientation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: GameState.Orientation)
                   (b :: GameState.Orientation) ->
                 case a of wild {
                   GameState.Up
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GameState.Up -> GHC.Types.False }
                   GameState.Right
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GameState.Right -> GHC.Types.False }
                   GameState.Down
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GameState.Down -> GHC.Types.False }
                   GameState.Left
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GameState.Left -> GHC.Types.False } }) -}
3d290f688c88cbe1ac3d75314640f7a7
  $fEqOrientation_$c== ::
    GameState.Orientation -> GameState.Orientation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: GameState.Orientation)
                   (ds1 :: GameState.Orientation) ->
                 case ds of wild {
                   GameState.Up
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GameState.Up -> GHC.Types.True }
                   GameState.Right
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GameState.Right -> GHC.Types.True }
                   GameState.Down
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GameState.Down -> GHC.Types.True }
                   GameState.Left
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GameState.Left -> GHC.Types.True } }) -}
51fd731bcb76d930713634f204469e8c
  $tc'Down :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16239416253458364129##
                   6314193503466062631##
                   GameState.$trModule
                   GameState.$tc'Down2
                   0#
                   GameState.$tc'Down1) -}
6bba897a58aa57c428e004a8b4726356
  $tc'Down1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
e8bda390bf015e0089e2953cf41e18bd
  $tc'Down2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameState.$tc'Down3) -}
813a9fc6bb6ff982aef051ebd7e7f72c
  $tc'Down3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Down"#) -}
f5f55b00e391633cb2dde35808f747a9
  $tc'Game :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1399241134460694333##
                   1426436652187366257##
                   GameState.$trModule
                   GameState.$tc'Game2
                   0#
                   GameState.$tc'Game1) -}
0cf9b709d3fb257cebab90e4f7d0f51d
  $tc'Game1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
da96d15c9c9e790595e099fb02f43423
  $tc'Game2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameState.$tc'Game3) -}
241f4a5609bf212f65e62ec8e2c6ac4c
  $tc'Game3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Game"#) -}
fe6ff7c7311bc603cb11ba7e5e5e7ed8
  $tc'Left :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17157309165823348427##
                   2827598764721862110##
                   GameState.$trModule
                   GameState.$tc'Left1
                   0#
                   GameState.$tc'Down1) -}
6687d158638bbd51742113bfead03137
  $tc'Left1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameState.$tc'Left2) -}
3a1277351cff105ca9492e598e30e494
  $tc'Left2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Left"#) -}
dbcf00e74cf192146246d10dcb676149
  $tc'Right :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5168745038257613318##
                   8603448643400439369##
                   GameState.$trModule
                   GameState.$tc'Right1
                   0#
                   GameState.$tc'Down1) -}
f77257401e3bd2ad30fcd4c88051d27b
  $tc'Right1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameState.$tc'Right2) -}
2373538cc3157f0ba567ae8612742ad9
  $tc'Right2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Right"#) -}
a2176b9bb3c40b20b8d09260dcd6e42e
  $tc'Up :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1119854566878702067##
                   1534771386706711875##
                   GameState.$trModule
                   GameState.$tc'Up1
                   0#
                   GameState.$tc'Down1) -}
23eba2a766e9816962c25ce300048a13
  $tc'Up1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameState.$tc'Up2) -}
3a0bdc2aaacdbe7fe07bd00fa4f0fc41
  $tc'Up2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Up"#) -}
dfb02c2c4fdbda2a6c87b16640970362
  $tcGameState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7786766542521882612##
                   12427255979470769624##
                   GameState.$trModule
                   GameState.$trModule1
                   0#
                   GHC.Types.krep$*) -}
f1eb500d897d4e126c49406dbcadd0ee
  $tcOrientation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14131255298378828576##
                   6943859069111136985##
                   GameState.$trModule
                   GameState.$tcOrientation1
                   0#
                   GHC.Types.krep$*) -}
ad413e1f7bee8309ee08c85507c192f3
  $tcOrientation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameState.$tcOrientation2) -}
091303f54fda8591dfd446e2123b7f0b
  $tcOrientation2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Orientation"#) -}
25575bd6db54d584fe62c7fd51071446
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   GameState.$trModule3
                   GameState.$trModule1) -}
453932ed5d958bf4600a03cbee3f421c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameState.$trModule2) -}
52c9037d52099eacd14ecf874b45d2ee
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GameState"#) -}
1b63384f6c79de2f8021327818bec06b
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameState.$trModule4) -}
6a0a786aa56b700db036cc59b3ce552d
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
4ac8d945e93e405b94c13340932266e0
  data GameState
    = Game {snakeBody :: [GameState.Position],
            applePos :: GameState.Position,
            orientation :: GameState.Orientation,
            tilesToBeAdded :: GHC.Types.Int}
3d290f688c88cbe1ac3d75314640f7a7
  data Orientation = Up | Right | Down | Left
9b66e2b9ae1f48a2fc148b75d149bea2
  type Position = (GHC.Types.Int, GHC.Types.Int)
4ac8d945e93e405b94c13340932266e0
  applePos :: GameState.GameState -> GameState.Position
  RecSel Left GameState.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameState.GameState) ->
                 case ds of wild { GameState.Game ds1 ds2 ds3 ds4 -> ds2 }) -}
2ef5b4a2fc24d339c35d065135265708
  initialGameState :: GameState.GameState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GameState.Game
                   GameState.initialGameState5
                   GameState.initialGameState2
                   GameState.Left
                   GameState.initialGameState1) -}
5f686c7784a6f853d12f501d0b886443
  initialGameState1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
988f2e4c2f8b8f913647664ef998d88c
  initialGameState2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GameState.initialGameState4,
                  GameState.initialGameState3)) -}
8fda3c797e1a015f2d559267a8ff60e9
  initialGameState3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
0cba67e55365e7995b0875e91e79d284
  initialGameState4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
2aeeeb58a733dd536e2a7447a8b50846
  initialGameState5 :: [GameState.Position]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameState.Position
                   GameState.initialGameState6
                   (GHC.Types.[] @ GameState.Position)) -}
11e1962cd8a8dfe5bb81a9fba850902c
  initialGameState6 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GameState.initialGameState3,
                  GameState.initialGameState3)) -}
4ac8d945e93e405b94c13340932266e0
  orientation :: GameState.GameState -> GameState.Orientation
  RecSel Left GameState.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameState.GameState) ->
                 case ds of wild { GameState.Game ds1 ds2 ds3 ds4 -> ds3 }) -}
7d898603fa31619c3a517a084ed3797d
  orientationToInt :: GameState.Orientation -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GameState.Orientation) ->
                 case x of wild {
                   GameState.Up -> GameState.initialGameState3
                   GameState.Right -> GameState.orientationToInt2
                   GameState.Down -> GameState.orientationToInt1
                   GameState.Left -> GameState.initialGameState1 }) -}
7cbda304f544fd7e6038d90208255d31
  orientationToInt1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
81fb53f12831e72bacbc6e50973ddfeb
  orientationToInt2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
22fcac6ae4401c140a7c8bfb9c6ffa1b
  orientationToPosition ::
    GameState.Orientation -> GameState.Position
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GameState.Orientation) ->
                 case x of wild {
                   GameState.Up -> GameState.orientationToPosition3
                   GameState.Right -> GameState.orientationToPosition2
                   GameState.Down -> GameState.orientationToPosition1
                   GameState.Left -> GameState.initialGameState2 }) -}
89879458f716ba5f15d942d584327d4e
  orientationToPosition1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GameState.initialGameState3,
                  GameState.initialGameState4)) -}
9cd3f4bb22a1d12dbd6eb527227cec3a
  orientationToPosition2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GameState.orientationToInt2,
                  GameState.initialGameState3)) -}
1efcddc8e13e98b9290d2b337b01d7b8
  orientationToPosition3 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GameState.initialGameState3,
                  GameState.orientationToInt2)) -}
4ac8d945e93e405b94c13340932266e0
  snakeBody :: GameState.GameState -> [GameState.Position]
  RecSel Left GameState.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameState.GameState) ->
                 case ds of wild { GameState.Game ds1 ds2 ds3 ds4 -> ds1 }) -}
4ac8d945e93e405b94c13340932266e0
  tilesToBeAdded :: GameState.GameState -> GHC.Types.Int
  RecSel Left GameState.GameState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLS),1*U(A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameState.GameState) ->
                 case ds of wild { GameState.Game ds1 ds2 ds3 ds4 -> ds4 }) -}
instance [safe] GHC.Classes.Eq [GameState.Orientation]
  = GameState.$fEqOrientation
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

