
==================== FINAL INTERFACE ====================
2018-01-23 20:30:34.785205 UTC

interface main:EventSystem 8022
  interface hash: 13d5d9a9d25d13859817d0036d0d66ca
  ABI hash: 052b031b9c18e6339d432b5fc28b466c
  export-list hash: 3399d94de10429af1a32977839a17469
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1c6f65d52f53d3e6bedf9b8d55a3afa1
  sig of: Nothing
  used TH splices: False
  where
exports:
  EventSystem.canChangeTo
  EventSystem.handleKeys
module dependencies: GameState
package dependencies: GLURaw-2.0.0.3 GLUT-2.7.0.12
                      ObjectName-1.1.0.1 OpenGL-3.0.2.0 OpenGLRaw-3.2.7.0
                      StateVar-1.1.0.4 array-0.5.2.0 base-4.10.1.0 binary-0.8.5.1
                      bmp-1.2.6.3 bytestring-0.10.8.2 containers-0.5.10.2 deepseq-1.4.3.0
                      fixed-0.2.1.1 ghc-prim-0.5.1.1 gloss-1.11.1.1
                      gloss-rendering-1.11.1.1 half-0.2.2.3 integer-gmp-1.0.1.0
                      stm-2.4.4.1 text-1.2.2.2
orphans: gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.4.1:Control.Monad.STM text-1.2.2.2:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.2.2:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         text-1.2.2.2:Data.Text
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  gloss-1.11.1.1:Graphics.Gloss.Interface.IO.Game 4df1659e96e880a956d4a1857412cb31
import  -/  gloss-1.11.1.1:Graphics.Gloss.Internals.Interface.Backend.Types e9f36772aaa47b9123c9f37541e37a9b
import  -/  gloss-1.11.1.1:Graphics.Gloss.Internals.Interface.Event 1fe8034af0bd96eeb41f9dff74e936cf
import  -/  GameState 8acd50b608ce6b3d98f8794a54aa4079
  exports: c8cecce746904f3520e2c67cee428f1f
  Down 4377854ddbe67d1e54162ad32a574fac
  GameState 1387295e6596f0d70fba3d2d2f446eff
  Left 1c84d1d8f4d686ff62f685959c4f34dd
  Orientation 585e8e0523042e64f83842f1a051a378
  Right 67d7d59836ee3d0a3e33a6f25d911003
  Up c9f957651585ced0f8adf481f4b4b919
  changeOfOrientation 1387295e6596f0d70fba3d2d2f446eff
  initialGameState c47c58f20e827568559e18c00017ce6f
  orientation 1387295e6596f0d70fba3d2d2f446eff
  orientationToInt a0a973624073b0dd180c0b914aa48c9f
f7719f52e0242192f0084f60bb918a2e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   EventSystem.$trModule3
                   EventSystem.$trModule1) -}
36ebd26a173804655c5e9e2d5ecdb2ed
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS EventSystem.$trModule2) -}
dec6d414130d8ecee6bd8102ca1251d3
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EventSystem"#) -}
dd9643ecfdb0f5173742ebf35317576d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS EventSystem.$trModule4) -}
7407e50ad74684ac246fcfec2e7fcaf8
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
5c1f2bf0849f7c2e9929df82aa34de30
  $wcanChangeTo ::
    GameState.Orientation
    -> GameState.Orientation -> GHC.Types.Bool -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: GameState.Orientation)
                   (ww :: GameState.Orientation)
                   (ww1 :: GHC.Types.Bool) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (x :: GHC.Prim.Int#)[OneShot] ->
                     case ww of wild {
                       GameState.Up
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# x 0#) of wild1 {
                            GHC.Types.False
                            -> case GHC.Prim.andI# (GHC.Prim.negateInt# x) 1# of wild2 {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> case ww1 of wild3 {
                                      GHC.Types.False -> GHC.Types.True
                                      GHC.Types.True -> GHC.Types.False } }
                            GHC.Types.True
                            -> case GHC.Prim.andI# x 1# of wild2 {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> case ww1 of wild3 {
                                      GHC.Types.False -> GHC.Types.True
                                      GHC.Types.True -> GHC.Types.False } } }
                       GameState.Right
                       -> let {
                            x1 :: GHC.Prim.Int# = GHC.Prim.-# x 1#
                          } in
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# x1 0#) of wild1 {
                            GHC.Types.False
                            -> case GHC.Prim.andI# (GHC.Prim.negateInt# x1) 1# of wild2 {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> case ww1 of wild3 {
                                      GHC.Types.False -> GHC.Types.True
                                      GHC.Types.True -> GHC.Types.False } }
                            GHC.Types.True
                            -> case GHC.Prim.andI# x1 1# of wild2 {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> case ww1 of wild3 {
                                      GHC.Types.False -> GHC.Types.True
                                      GHC.Types.True -> GHC.Types.False } } }
                       GameState.Down
                       -> let {
                            x1 :: GHC.Prim.Int# = GHC.Prim.-# x 2#
                          } in
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# x1 0#) of wild1 {
                            GHC.Types.False
                            -> case GHC.Prim.andI# (GHC.Prim.negateInt# x1) 1# of wild2 {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> case ww1 of wild3 {
                                      GHC.Types.False -> GHC.Types.True
                                      GHC.Types.True -> GHC.Types.False } }
                            GHC.Types.True
                            -> case GHC.Prim.andI# x1 1# of wild2 {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> case ww1 of wild3 {
                                      GHC.Types.False -> GHC.Types.True
                                      GHC.Types.True -> GHC.Types.False } } }
                       GameState.Left
                       -> let {
                            x1 :: GHC.Prim.Int# = GHC.Prim.-# x 3#
                          } in
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# x1 0#) of wild1 {
                            GHC.Types.False
                            -> case GHC.Prim.andI# (GHC.Prim.negateInt# x1) 1# of wild2 {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> case ww1 of wild3 {
                                      GHC.Types.False -> GHC.Types.True
                                      GHC.Types.True -> GHC.Types.False } }
                            GHC.Types.True
                            -> case GHC.Prim.andI# x1 1# of wild2 {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> case ww1 of wild3 {
                                      GHC.Types.False -> GHC.Types.True
                                      GHC.Types.True -> GHC.Types.False } } } }
                 } in
                 case w of wild {
                   GameState.Up -> $j 0#
                   GameState.Right -> $j 1#
                   GameState.Down -> $j 2#
                   GameState.Left -> $j 3# }) -}
d8b6abc29e55262fb36ba089f3d7aa1c
  canChangeTo ::
    GameState.Orientation -> GameState.GameState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U><S(LLSLLL),1*U(A,A,1*U,A,A,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GameState.Orientation) (w1 :: GameState.GameState) ->
                 case w1 of ww { GameState.Game ww1 ww2 ww3 ww4 ww5 ww6 ->
                 EventSystem.$wcanChangeTo w ww3 ww6 }) -}
19cb3b8c73bea0fbf21faac715573e97
  handleKeys ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> GameState.GameState -> GameState.GameState
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U,U,U,U)>,
     Unfolding: (\ (ds :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (state :: GameState.GameState) ->
                 case ds of wild {
                   DEFAULT -> state
                   Graphics.Gloss.Internals.Interface.Event.EventKey key ds1 ds2 ds3
                   -> case ds1 of wild1 {
                        Graphics.Gloss.Internals.Interface.Backend.Types.Down
                        -> let {
                             $j :: GameState.GameState <join 0>
                             = let {
                                 $j1 :: GameState.GameState <join 0>
                                 = let {
                                     $j2 :: GameState.GameState <join 0>
                                     = case key of wild2 {
                                         Graphics.Gloss.Internals.Interface.Backend.Types.Char a1
                                         -> case a1 of wild3 { GHC.Types.C# x ->
                                            case x of wild4 {
                                              DEFAULT -> state
                                              'd'#
                                              -> case state of ww { GameState.Game ww1 ww2 ww3 ww4 ww5 ww6 ->
                                                 case EventSystem.$wcanChangeTo
                                                        GameState.Right
                                                        ww3
                                                        ww6 of wild5 {
                                                   GHC.Types.False -> ww
                                                   GHC.Types.True
                                                   -> GameState.Game
                                                        ww1
                                                        ww2
                                                        GameState.Right
                                                        ww4
                                                        ww5
                                                        GHC.Types.True } }
                                              'r'# -> GameState.initialGameState } }
                                         Graphics.Gloss.Internals.Interface.Backend.Types.SpecialKey a1
                                         -> state
                                         Graphics.Gloss.Internals.Interface.Backend.Types.MouseButton a1
                                         -> state }
                                   } in
                                   case key of wild2 {
                                     Graphics.Gloss.Internals.Interface.Backend.Types.Char a1
                                     -> case a1 of wild3 { GHC.Types.C# x ->
                                        case x of wild4 {
                                          DEFAULT -> $j2
                                          'a'#
                                          -> case state of ww { GameState.Game ww1 ww2 ww3 ww4 ww5 ww6 ->
                                             case EventSystem.$wcanChangeTo
                                                    GameState.Left
                                                    ww3
                                                    ww6 of wild5 {
                                               GHC.Types.False -> ww
                                               GHC.Types.True
                                               -> GameState.Game
                                                    ww1
                                                    ww2
                                                    GameState.Left
                                                    ww4
                                                    ww5
                                                    GHC.Types.True } } } }
                                     Graphics.Gloss.Internals.Interface.Backend.Types.SpecialKey a1
                                     -> $j2
                                     Graphics.Gloss.Internals.Interface.Backend.Types.MouseButton a1
                                     -> $j2 }
                               } in
                               case key of wild2 {
                                 Graphics.Gloss.Internals.Interface.Backend.Types.Char a1
                                 -> case a1 of wild3 { GHC.Types.C# x ->
                                    case x of wild4 {
                                      DEFAULT -> $j1
                                      's'#
                                      -> case state of ww { GameState.Game ww1 ww2 ww3 ww4 ww5 ww6 ->
                                         case EventSystem.$wcanChangeTo
                                                GameState.Down
                                                ww3
                                                ww6 of wild5 {
                                           GHC.Types.False -> ww
                                           GHC.Types.True
                                           -> GameState.Game
                                                ww1
                                                ww2
                                                GameState.Down
                                                ww4
                                                ww5
                                                GHC.Types.True } } } }
                                 Graphics.Gloss.Internals.Interface.Backend.Types.SpecialKey a1
                                 -> $j1
                                 Graphics.Gloss.Internals.Interface.Backend.Types.MouseButton a1
                                 -> $j1 }
                           } in
                           case key of wild2 {
                             Graphics.Gloss.Internals.Interface.Backend.Types.Char a1
                             -> case a1 of wild3 { GHC.Types.C# x ->
                                case x of wild4 {
                                  DEFAULT -> $j
                                  'w'#
                                  -> case state of ww { GameState.Game ww1 ww2 ww3 ww4 ww5 ww6 ->
                                     case EventSystem.$wcanChangeTo GameState.Up ww3 ww6 of wild5 {
                                       GHC.Types.False -> ww
                                       GHC.Types.True
                                       -> GameState.Game
                                            ww1
                                            ww2
                                            GameState.Up
                                            ww4
                                            ww5
                                            GHC.Types.True } } } }
                             Graphics.Gloss.Internals.Interface.Backend.Types.SpecialKey a1
                             -> $j
                             Graphics.Gloss.Internals.Interface.Backend.Types.MouseButton a1
                             -> $j }
                        Graphics.Gloss.Internals.Interface.Backend.Types.Up
                        -> state } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

