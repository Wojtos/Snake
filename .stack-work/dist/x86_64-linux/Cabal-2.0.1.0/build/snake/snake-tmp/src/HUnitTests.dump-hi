
==================== FINAL INTERFACE ====================
2018-01-23 20:31:39.903879 UTC

interface main:HUnitTests 8022
  interface hash: 9af57015ec041ccb541ee73298be9166
  ABI hash: 5037023bf7948d8668a82bc576d37add
  export-list hash: 68706197eb7fc0ccbb4defe5dc8d8037
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1c6f65d52f53d3e6bedf9b8d55a3afa1
  sig of: Nothing
  used TH splices: False
  where
exports:
  HUnitTests.test1
  HUnitTests.test2
  HUnitTests.test3
  HUnitTests.test4
  HUnitTests.test5
  HUnitTests.testUpdate
module dependencies: GameSettings GameState UpdateGame
package dependencies: GLURaw-2.0.0.3 GLUT-2.7.0.12 HUnit-1.6.0.0
                      ObjectName-1.1.0.1 OpenGL-3.0.2.0 OpenGLRaw-3.2.7.0
                      StateVar-1.1.0.4 array-0.5.2.0 base-4.10.1.0 binary-0.8.5.1
                      bmp-1.2.6.3 bytestring-0.10.8.2 call-stack-0.1.0
                      containers-0.5.10.2 deepseq-1.4.3.0 fixed-0.2.1.1 ghc-prim-0.5.1.1
                      gloss-1.11.1.1 gloss-rendering-1.11.1.1 half-0.2.2.3
                      integer-gmp-1.0.1.0 stm-2.4.4.1 text-1.2.2.2
orphans: gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.4.1:Control.Monad.STM text-1.2.2.2:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.2.2:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         text-1.2.2.2:Data.Text
import  -/  HUnit-1.6.0.0:Test.HUnit 80cbcb3315181d19695a82478844cc0c
import  -/  HUnit-1.6.0.0:Test.HUnit.Base e6af8f3ac825f8be9192c09dd680a677
import  -/  HUnit-1.6.0.0:Test.HUnit.Lang 20dd0c0d81dbf5e2ac6dd8fba57b0de2
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  GameSettings 61d2a1e958f0b59a2cf36e3ede7af58a
  exports: 044aa57492f2bc97370b52b50dbe2e24
  fps caa4fbad3dccbcf080ad5fe0bb6f6dd2
  rewardForEatingApple 303c8dbac0757e0047281654107b75b5
  sizeOfBoard a8d802b621aed8ed3c285b99f12cd26a
import  -/  GameState 8acd50b608ce6b3d98f8794a54aa4079
  exports: c8cecce746904f3520e2c67cee428f1f
  Game 5e6ec80da91de64f4e07dd99ea67efb1
  Right 67d7d59836ee3d0a3e33a6f25d911003
  applePos 1387295e6596f0d70fba3d2d2f446eff
  changeOfOrientation 1387295e6596f0d70fba3d2d2f446eff
  isEnded 1387295e6596f0d70fba3d2d2f446eff
  orientation 1387295e6596f0d70fba3d2d2f446eff
  snakeBody 1387295e6596f0d70fba3d2d2f446eff
  tilesToBeAdded 1387295e6596f0d70fba3d2d2f446eff
import  -/  UpdateGame 7293d57cf824e2462c69fb452e6b3b98
  exports: ee87f42c4e9a95da6e7af1eff1fca0ce
  update 2cc8b84e9c0815e5bb3d72b078beaeb6
d5f669afac3e60aa2450dc76653b7ff9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   HUnitTests.$trModule3
                   HUnitTests.$trModule1) -}
2abc1fb210466aa9341fee2d84054fa0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HUnitTests.$trModule2) -}
1e447ab245adff45d5740b2da305a286
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HUnitTests"#) -}
3add0fffc525883834dbc7fd476115ad
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS HUnitTests.$trModule4) -}
cb95deb3b8c60a9d3fd0b15c1aa7c942
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
118cb4a725a4d5eb175e4de1b924bc07
  test1 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   HUnitTests.test7 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
ecf34ebed6dced4c7c30a0cfe17818d3
  test10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("regular move"#) -}
ff414835b5ae56521e38507971f8aa79
  test11 :: GameState.GameState
  {- Unfolding: (case UpdateGame.$wupdate
                        HUnitTests.test12 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 GameState.Game ww1 ww2 ww3 ww4 ww5 ww6 }) -}
89340c02f6c28fe8deae131797499353
  test12 :: GameState.GameState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GameState.Game
                   HUnitTests.test16
                   HUnitTests.test14
                   GameState.Right
                   HUnitTests.test13
                   GHC.Types.False
                   GHC.Types.False) -}
a2bb54b3b7469b7eb22753257311bc68
  test13 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
ee7b60e78b68b79ea4fec1a2c11b1786
  test14 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((HUnitTests.test15, HUnitTests.test15)) -}
0148a63f901fcfde6fbcf937eee415b9
  test15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
2788e1b9580bfdae50c0a2a3b54cca83
  test16 :: [GameState.Position]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameState.Position
                   HUnitTests.test22
                   HUnitTests.test17) -}
7f60e290e07a0e0b474591af65a36882
  test17 :: [GameState.Position]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameState.Position
                   HUnitTests.test21
                   HUnitTests.test18) -}
f5ba3c38810dc539fba6077607cf17a3
  test18 :: [GameState.Position]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameState.Position
                   HUnitTests.test19
                   (GHC.Types.[] @ GameState.Position)) -}
f54fec0154ee0987f1bf77b706b6b52b
  test19 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((HUnitTests.test20, HUnitTests.test20)) -}
79b63384eaf15c61f7ba92522292c71e
  test1_state1' :: GameState.GameState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GameState.Game
                   HUnitTests.test23
                   HUnitTests.test14
                   GameState.Right
                   HUnitTests.test13
                   GHC.Types.False
                   GHC.Types.False) -}
37ef11833ed04c0d485ddb33d04a75e0
  test2 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   HUnitTests.test27 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
c933471bc18c1c5fe4cbf25864c1ceeb
  test20 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
db535fa0330150017b1677d211c86599
  test21 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((HUnitTests.test13, HUnitTests.test20)) -}
4ffbb2ab24fd0921bf2c37463e4f7973
  test22 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((HUnitTests.test13, HUnitTests.test13)) -}
33d0d0ec3553ea9ac396b0038310d3c5
  test23 :: [GameState.Position]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameState.Position
                   HUnitTests.test26
                   HUnitTests.test24) -}
6bf34eb199f183c1c15c69af20c66ba4
  test24 :: [GameState.Position]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameState.Position
                   HUnitTests.test22
                   HUnitTests.test25) -}
6ccb0339f4b45ec92b0595c811b98592
  test25 :: [GameState.Position]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameState.Position
                   HUnitTests.test21
                   (GHC.Types.[] @ GameState.Position)) -}
49ed662ff4bb3920b9970ebbc34f1741
  test26 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((HUnitTests.test20, HUnitTests.test13)) -}
9f305db95b0080b04e166ce0f2a61182
  test27 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case UpdateGame.$wupdate
                        HUnitTests.test31 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww5 of wild {
                   GHC.Types.False
                   -> case Test.HUnit.Lang.assertEqual_go
                             HUnitTests.test29 of wild2 { () ->
                      case Test.HUnit.Lang.assertEqual_go
                             GHC.Show.$fShowBool3 of wild3 { () ->
                      case Test.HUnit.Lang.assertEqual_go
                             GHC.Show.$fShowBool1 of wild1 { () ->
                      HUnitTests.test28 eta3 } } }
                   GHC.Types.True -> (# eta3, GHC.Tuple.() #) } }) -}
f3d27a97c3eb53ba255de55258e09907
  test28 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
69b63154dbfe11250706a71a7712bb2b
  test29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# HUnitTests.test30) -}
02f5815cdb929a153b59130496414b2b
  test3 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   HUnitTests.test35 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
c541e3537b2672e7b8ae092d5bef83d9
  test30 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("wall collision"#) -}
9e94bb168b4fe490c55d5a1073d97be0
  test31 :: GameState.GameState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GameState.Game
                   HUnitTests.test32
                   HUnitTests.test14
                   GameState.Right
                   HUnitTests.test13
                   GHC.Types.False
                   GHC.Types.False) -}
06f6c909247aacf2880f80c6d7fa167b
  test32 :: [GameState.Position]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameState.Position
                   HUnitTests.test33
                   (GHC.Types.[] @ GameState.Position)) -}
f04c552442de2acda2af0488d56f7e19
  test33 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((HUnitTests.test34, HUnitTests.test13)) -}
c011037ca8efe1a4d6b46ca152e56ffa
  test34 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
8e58132dbc9aef9c393599034c12456e
  test35 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case UpdateGame.$wupdate
                        HUnitTests.test39 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww4 of wild1 { GHC.Types.I# y ->
                 case y of wild {
                   DEFAULT
                   -> case Test.HUnit.Lang.assertEqual_go
                             HUnitTests.test37 of wild2 { () ->
                      case GHC.Show.$wshowSignedInt
                             0#
                             wild
                             (GHC.Types.[] @ GHC.Types.Char) of ww7 { (#,#) ww8 ww9 ->
                      HUnitTests.test36 eta3 ww9 ww8 } }
                   3# -> (# eta3, GHC.Tuple.() #) } } }) -}
95c011c7ff9d76027e6be3aa1c10a3be
  test36 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [GHC.Types.Char]
    -> GHC.Types.Char
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <B,U><B,U><B,U>x -}
4d5d5e4dc38ffc3a0c8057fe7ccefca5
  test37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# HUnitTests.test38) -}
80c678a5f2687287996fe43f095c6054
  test38 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ate apple"#) -}
661842fbc7b046677db34329cfa2d06b
  test39 :: GameState.GameState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GameState.Game
                   HUnitTests.test16
                   HUnitTests.test26
                   GameState.Right
                   HUnitTests.test13
                   GHC.Types.False
                   GHC.Types.False) -}
e35ae07d161d089a92d81c42b9a9058c
  test4 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   HUnitTests.test40 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
3ff54e6dd557129012d3a1bc08e296c1
  test40 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GameState.$fEqGameState_$c==
                        HUnitTests.test4_state4'
                        HUnitTests.test44 of wild {
                   GHC.Types.False
                   -> case Test.HUnit.Lang.assertEqual_go
                             HUnitTests.test42 of wild2 { () ->
                      case HUnitTests.test44 of ww2 { GameState.Game ww3 ww4 ww5 ww6 ww7 ww8 ->
                      HUnitTests.test41 eta3 ww4 ww3 ww5 ww6 ww7 ww8 } }
                   GHC.Types.True -> (# eta3, GHC.Tuple.() #) }) -}
23c560fda566e16bb3726376e191d497
  test41 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GameState.Position
    -> [GameState.Position]
    -> GameState.Orientation
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <B,U><B,1*U(1*U(U),1*U(U))><B,1*U><B,1*U><B,1*U(U)><B,1*U><B,1*U>x -}
ec7dab99227633919f2800fb02c64941
  test42 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# HUnitTests.test43) -}
775772060b83947b7ca962eeee1912ed
  test43 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("move while growing"#) -}
17d9a3e95a83340a13d8467a2a94191e
  test44 :: GameState.GameState
  {- Unfolding: (case UpdateGame.$wupdate
                        HUnitTests.test45 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 GameState.Game ww1 ww2 ww3 ww4 ww5 ww6 }) -}
9e2c74cb33760fe4a68819244d17eb00
  test45 :: GameState.GameState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GameState.Game
                   HUnitTests.test16
                   HUnitTests.test14
                   GameState.Right
                   HUnitTests.test46
                   GHC.Types.False
                   GHC.Types.False) -}
ccbed4b9a8d8cd59be64a63b67e60d88
  test46 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
14b3e8a7de59578905d4fdf02069d55a
  test47 :: [GameState.Position]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameState.Position
                   HUnitTests.test26
                   HUnitTests.test16) -}
0f7895ba6267beea5d5cd836af874aa0
  test48 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case UpdateGame.$wupdate
                        HUnitTests.test52 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww5 of wild {
                   GHC.Types.False
                   -> case Test.HUnit.Lang.assertEqual_go
                             HUnitTests.test50 of wild2 { () ->
                      case Test.HUnit.Lang.assertEqual_go
                             GHC.Show.$fShowBool3 of wild3 { () ->
                      case Test.HUnit.Lang.assertEqual_go
                             GHC.Show.$fShowBool1 of wild1 { () ->
                      HUnitTests.test49 eta3 } } }
                   GHC.Types.True -> (# eta3, GHC.Tuple.() #) } }) -}
3a6e7682acdc9e8ba3ce4623252faa83
  test49 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <B,U>x -}
7fab56d4a7bdd3978fde0d9b42af3488
  test4_state4' :: GameState.GameState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GameState.Game
                   HUnitTests.test47
                   HUnitTests.test14
                   GameState.Right
                   HUnitTests.test20
                   GHC.Types.False
                   GHC.Types.False) -}
6dd8ddcfebaacebe4d8dafa3ad941313
  test5 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   HUnitTests.test48 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
58029a0cf25546413c945476d2197048
  test50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# HUnitTests.test51) -}
69d7c94f2eb648f8164da57418c73ff2
  test51 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("collision with body"#) -}
d344a56aeae4509988535eda91d82571
  test52 :: GameState.GameState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GameState.Game
                   HUnitTests.test53
                   HUnitTests.test14
                   GameState.Right
                   HUnitTests.test13
                   GHC.Types.False
                   GHC.Types.False) -}
314dfc43e1cf802a319829d3c2180a50
  test53 :: [GameState.Position]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameState.Position
                   HUnitTests.test22
                   HUnitTests.test54) -}
e702288b5e7424b4ec3c83f0d0de320b
  test54 :: [GameState.Position]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameState.Position
                   HUnitTests.test21
                   HUnitTests.test55) -}
d8f3b170b1ee0b84e30c5654fd5e9cbd
  test55 :: [GameState.Position]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameState.Position
                   HUnitTests.test19
                   HUnitTests.test56) -}
a53e1e091cfe8bee5482cd836dced59f
  test56 :: [GameState.Position]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameState.Position
                   HUnitTests.test26
                   HUnitTests.test57) -}
60adaf729eafa0f1818de9fa4fce51f4
  test57 :: [GameState.Position]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GameState.Position
                   HUnitTests.test58
                   (GHC.Types.[] @ GameState.Position)) -}
94209914b46a4387224d80ff753290f7
  test58 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((HUnitTests.test20, HUnitTests.test15)) -}
5b1a4bac9b70cab3c8d2efb176c87881
  test7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GameState.$fEqGameState_$c==
                        HUnitTests.test1_state1'
                        HUnitTests.test11 of wild {
                   GHC.Types.False
                   -> case Test.HUnit.Lang.assertEqual_go
                             HUnitTests.test9 of wild2 { () ->
                      case HUnitTests.test11 of ww2 { GameState.Game ww3 ww4 ww5 ww6 ww7 ww8 ->
                      HUnitTests.test8 eta3 ww4 ww3 ww5 ww6 ww7 ww8 } }
                   GHC.Types.True -> (# eta3, GHC.Tuple.() #) }) -}
2cb5f32609990895fb5d34919f83cf1b
  test8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GameState.Position
    -> [GameState.Position]
    -> GameState.Orientation
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <B,U><B,1*U(1*U(U),1*U(U))><B,1*U><B,1*U><B,1*U(U)><B,1*U><B,1*U>x -}
9f00f29ec0c3e392b77f839d007220e0
  test9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# HUnitTests.test10) -}
2573e2c2f65478729ef14471bad206eb
  testUpdate :: Test.HUnit.Base.Test
  {- Strictness: m2,
     Unfolding: (Test.HUnit.Base.TestList HUnitTests.testUpdate1) -}
5625a76d050898abfbcb276362681353
  testUpdate1 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   HUnitTests.testUpdate10
                   HUnitTests.testUpdate2) -}
a516f95055e4e39c11e66c79c429f71e
  testUpdate10 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   HUnitTests.test9
                   HUnitTests.test1) -}
24999121492f748656fccb455b4f0e0b
  testUpdate2 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   HUnitTests.testUpdate9
                   HUnitTests.testUpdate3) -}
0437d7cd92a94359f32a8d79208f9ecc
  testUpdate3 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   HUnitTests.testUpdate8
                   HUnitTests.testUpdate4) -}
f183965d9670926181e6bf08e370b552
  testUpdate4 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   HUnitTests.testUpdate7
                   HUnitTests.testUpdate5) -}
54dc945f182ffab3243977cad40a6b6b
  testUpdate5 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   HUnitTests.testUpdate6
                   (GHC.Types.[] @ Test.HUnit.Base.Test)) -}
f7907e29bdc029c75e767568d863d8f1
  testUpdate6 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   HUnitTests.test50
                   HUnitTests.test5) -}
07991bb88d267fbbe9ade42623e3a6f3
  testUpdate7 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   HUnitTests.test42
                   HUnitTests.test4) -}
d9ef188cb777ef71a3d0b204e3725c20
  testUpdate8 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   HUnitTests.test37
                   HUnitTests.test3) -}
d43e976a637d966c4a1921bf1ffaf6c0
  testUpdate9 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   HUnitTests.test29
                   HUnitTests.test2) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

